//same as l	rraylist
LinkedList <String> book_list = new LinkedList <String> ();
		book_list.add("Java");
//add elenent in pos move rest add(i,"ggg  //to show elements or (String b : book_list)
		{
			System.out.println(b);
		} 
//reverse    int j=0;
	        for(int i=list_Book1.size()-1;i>=0;i--){
	         list_Book.add(j , list_Book1.get(i));
	         j++;
//iterator Iterator b = book_list.listIterator(3);
		while (b.hasNext())
		{
//if element exsist contains("Cherry"))
//convert to arraymist 	List<String> array_list = new ArrayList<String>(linked_list);
 //to compare or check if empty same way as arraylist
//to replace use set  
//remove or pop for firset ele


///////////////////////nodes part
//add nodes and print
class Node {
    int Data;
    Node next;
    Node(int Data){
        this.Data=Data;
        this.next=null;
    }
}
class single{
    Node head;
    single(){
        this.head=null;
    }
    void append(int data){
         Node n=new Node(data);
        if(head==null){
           
            head=n;
        }
        else{
            Node current=head;
            if(current.next!=null){
                current =current.next;
            }
            current.next=n;
        }
        
    }
    void print(){
        Node c=head;
        while(c!=null){
            System.out.println(c.Data);
            c=c.next;
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		single s=new single();
		s.append(1);
		s.append(2);
		s.print();
	}
}
//middle of singly   int mid=count/2;
        int k=0;
       c = head; // Reset the pointer to the head of the list
   
    while (c!=null) {
        if(k==mid){
            
        
          System.out.println("The middle element is: " + c.Data);
          break;
    }
        c = c.next;
        k++;
       
    }
//delete all list 	void deleteList()
	{
		head = null;
	}	void deleteList()
	{
		head = null;
	}
